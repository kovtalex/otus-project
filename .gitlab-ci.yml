stages:
  - testing
  - build
  - push
  - staging
  - preprod
  - production

test unit crawler:
  stage: testing
  image: python:3.6.0-alpine
  tags:
    - docker
  script:
    - echo "test unit search_engine_crawler"
    - cd $CI_PROJECT_DIR/src/search_engine_crawler/
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/ 
    - coverage run -m unittest discover -s tests/ 
    - coverage report --include crawler/crawler.py
test unit ui:
  stage: testing
  image: python:3.6.0-alpine
  tags:
    - docker
  script:
    - echo "test unit search_engine_ui"
    - cd $CI_PROJECT_DIR/src/search_engine_ui/
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/ 
    - coverage run -m unittest discover -s tests/ 
    - coverage report --include ui/ui.py

build prometheus:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/services/monitoring/prometheus/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_SHA

build grafana:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/services/monitoring/grafana/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_SHA

build alertmanager:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/services/monitoring/alertmanager/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_SHA

build fluentd:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/services/logging/fluentd/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_SHA

build rabbitmq:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/services/rabbitmq/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_SHA

build ui:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/src/search_engine_ui/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_SHA

build crawler:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo 'Building...'
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_BASE64\"}}}" > /kaniko/.docker/config.json
    - cd $CI_PROJECT_DIR/src/search_engine_crawler/
    - /kaniko/executor --context ./ --dockerfile ./Dockerfile --destination $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_SHA

push latest:
  stage: push  
  image: docker:19
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - echo -n $CI_REGISTRY_PASS | docker login --username $CI_REGISTRY_USERNAME --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/prometheus_prj:latest
    - docker tag $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/grafana_prj:latest
    - docker tag $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/alertmanager_prj:latest
    - docker tag $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/fluentd_prj:latest
    - docker tag $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/rabbitmq:latest
    - docker tag $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/search_engine_ui:latest
    - docker tag $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/search_engine_crawler:latest
    - docker push $CI_REGISTRY_USERNAME/prometheus_prj:latest
    - docker push $CI_REGISTRY_USERNAME/grafana_prj:latest
    - docker push $CI_REGISTRY_USERNAME/alertmanager_prj:latest
    - docker push $CI_REGISTRY_USERNAME/fluentd_prj:latest
    - docker push $CI_REGISTRY_USERNAME/rabbitmq:latest
    - docker push $CI_REGISTRY_USERNAME/search_engine_ui:latest
    - docker push $CI_REGISTRY_USERNAME/search_engine_crawler:latest
  only:
    - master
    
push tag:
  stage: push
  image: docker:19
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - echo -n $CI_REGISTRY_PASS | docker login --username $CI_REGISTRY_USERNAME --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_SHA $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/prometheus_prj:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/grafana_prj:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/alertmanager_prj:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/fluentd_prj:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/rabbitmq:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/search_engine_ui:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_USERNAME/search_engine_crawler:$CI_COMMIT_REF_NAME
  only:
    - tags

deploy dev:
  stage: staging
  image: google/cloud-sdk
  tags:
    - docker
  script:
    - echo 'Deploy Dev env'
    - echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    - gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
    - gcloud compute scp --recurse docker docker-host-dev:~
    - gcloud compute ssh docker-host-dev --command="export CI_REGISTRY_USERNAME=$CI_REGISTRY_USERNAME && mkdir -p /root/docker && export RABBITMQ_VER=$CI_COMMIT_SHA && export UI_VER=$CI_COMMIT_SHA && export CRAWLER_VER=$CI_COMMIT_SHA && export PROMETHEUS_VER=$CI_COMMIT_SHA && export ALERTMANAGER_VER=$CI_COMMIT_SHA && export GRAFANA_VER=$CI_COMMIT_SHA && export FLUENTD_VER=$CI_COMMIT_SHA && cd ~/docker && mv -f .env.example .env && docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml -f docker-compose-logging.yml down && docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml -f docker-compose-logging.yml up -d"
  environment:
    name: dev
    url: $URL_DEV

.deploy: &deploy
  image: google/cloud-sdk
  tags:
    - docker
  script:
    - echo 'Deploy $CI_ENVIRONMENT_NAME env'
    - echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    - gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
    - gcloud compute scp --recurse docker docker-host-$CI_ENVIRONMENT_NAME:~
    - gcloud compute ssh docker-host-$CI_ENVIRONMENT_NAME --command="export CI_REGISTRY_USERNAME=$CI_REGISTRY_USERNAME && mkdir -p /root/docker && cd ~/docker && mv -f .env.example .env && docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml -f docker-compose-logging.yml down && docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml -f docker-compose-logging.yml up -d"
  when: manual
  only:
    - master

deploy preprod:
  stage: preprod
  environment:
    name: preprod
    url: $URL_PREPROD
  <<: *deploy

deploy production:
  stage: production
  environment:
    name: prod
    url: $URL_PROD
  <<: *deploy
